<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>无名斋</title>
    <link>http://localhost:1313/</link>
    <description>无名斋</description>
    <generator>Hugo 0.146.6 &amp; FixIt v0.3.19-c2dc17e9</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 22 Apr 2025 09:42:27 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>理解各种Timeout错误</title>
      <link>http://localhost:1313/posts/all-kinds-of-timeout/</link>
      <pubDate>Tue, 22 Apr 2025 09:42:27 +0800</pubDate>
      <guid>http://localhost:1313/posts/all-kinds-of-timeout/</guid>
      <category domain="http://localhost:1313/categories/%E7%BD%91%E7%BB%9C/">网络</category>
      <description>&lt;p&gt;网络通信中的各种“timed out”错误，诸如 connect timed out、read timed out 和 write timed out，通常与连接的延迟、数据传输的速度和网络状态等因素有关。接下来，我将详细解释这些超时错误的含义、原因和可能的解决方案。&lt;/p&gt;&#xA;&lt;h2 id=&#34;connect-timed-out&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Connect Timed Out&lt;/span&gt;&#xA;  &lt;a href=&#34;#connect-timed-out&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;定义：Connect timed out 错误发生在客户端尝试与服务器建立连接时。如果在指定的时间内未能成功建立连接，客户端就会触发超时错误。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre class=&#34;mermaid&#34;&gt;stateDiagram-v2&#xA;    [*] --&gt; 客户端发起连接&#xA;    客户端发起连接 --&gt; 发送SYN包: 发送SYN请求&#xA;    发送SYN包 --&gt; 等待SYN_ACK: 等待服务器响应&#xA;&#xA;    等待SYN_ACK --&gt; 超时场景&#xA;    超时场景 --&gt; 连接超时异常: 超过connectTimeout时间未收到SYN_ACK&#xA;    连接超时异常 --&gt; [*]: 抛出SocketTimeoutException(connect timed out)&#xA;&#xA;    等待SYN_ACK --&gt; 正常场景&#xA;    正常场景 --&gt; 收到SYN_ACK: 收到SYN+ACK&#xA;    收到SYN_ACK --&gt; 发送ACK包: 发送ACK确认&#xA;    发送ACK包 --&gt; 连接建立成功: 进入ESTABLISHED状态&lt;/pre&gt;&#xA;&lt;template&gt;stateDiagram-v2&#xA;    [*] --&gt; 客户端发起连接&#xA;    客户端发起连接 --&gt; 发送SYN包: 发送SYN请求&#xA;    发送SYN包 --&gt; 等待SYN_ACK: 等待服务器响应&#xA;&#xA;    等待SYN_ACK --&gt; 超时场景&#xA;    超时场景 --&gt; 连接超时异常: 超过connectTimeout时间未收到SYN_ACK&#xA;    连接超时异常 --&gt; [*]: 抛出SocketTimeoutException(connect timed out)&#xA;&#xA;    等待SYN_ACK --&gt; 正常场景&#xA;    正常场景 --&gt; 收到SYN_ACK: 收到SYN+ACK&#xA;    收到SYN_ACK --&gt; 发送ACK包: 发送ACK确认&#xA;    发送ACK包 --&gt; 连接建立成功: 进入ESTABLISHED状态&lt;/template&gt;&lt;ul&gt;&#xA;&lt;li&gt;具体含义：&#xA;客户端尝试与目标服务器建立 TCP 连接（即通过三次握手），但在规定的时间内未能完成连接。&#xA;这通常发生在连接目标主机不可达或目标主机响应非常慢时。&lt;/li&gt;&#xA;&lt;li&gt;常见原因：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;目标服务器不可达：例如，服务器宕机、目标主机的 IP 地址错误，或者目标端口未开放。&lt;/li&gt;&#xA;&lt;li&gt;网络延迟高：客户端与服务器之间的网络延迟过高，导致连接建立超时。&lt;/li&gt;&#xA;&lt;li&gt;防火墙或安全设置：客户端或服务器的防火墙可能阻止了连接请求。&lt;/li&gt;&#xA;&lt;li&gt;DNS 解析失败：域名解析出现问题，导致无法找到目标服务器的 IP 地址。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;解决方案：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;检查服务器状态：确保目标服务器运行正常，且目标端口已开放。&lt;/li&gt;&#xA;&lt;li&gt;验证网络连接：通过 ping 或 traceroute 等工具检查客户端和服务器之间的网络连通性。&lt;/li&gt;&#xA;&lt;li&gt;检查防火墙设置：确保没有防火墙或安全组阻止连接。&lt;/li&gt;&#xA;&lt;li&gt;验证 DNS 配置：确保域名解析正常，检查是否能成功解析目标服务器的 IP 地址。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;read-timed-out&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Read Timed Out&lt;/span&gt;&#xA;  &lt;a href=&#34;#read-timed-out&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;定义：Read timed out 错误发生在客户端与服务器成功建立连接后，但在等待服务器响应数据时，客户端在规定的时间内没有收到任何数据，从而触发读取超时。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre class=&#34;mermaid&#34;&gt;stateDiagram-v2&#xA;    [*] --&gt; 连接已建立&#xA;    连接已建立 --&gt; 发送请求数据: 发送HTTP请求/业务数据&#xA;    发送请求数据 --&gt; 等待响应头: 等待首个数据包&#xA;&#xA;    等待响应头 --&gt; 读取超时异常: 超过readTimeout时间未收到有效数据&#xA;    读取超时异常 --&gt; [*]: 抛出SocketTimeoutException(read timed out)&#xA;&#xA;&#xA;    等待响应头 --&gt; 收到首数据包: 收到响应头&#xA;    收到首数据包 --&gt; 等待数据分片: 开始接收数据流&#xA;    等待数据分片 --&gt; 处理数据分片: 持续接收数据块&#xA;    处理数据分片 --&gt; 数据接收完成: 收到完整响应体&#xA;    数据接收完成 --&gt; 业务处理: 执行后续逻辑&lt;/pre&gt;&#xA;&lt;template&gt;stateDiagram-v2&#xA;    [*] --&gt; 连接已建立&#xA;    连接已建立 --&gt; 发送请求数据: 发送HTTP请求/业务数据&#xA;    发送请求数据 --&gt; 等待响应头: 等待首个数据包&#xA;&#xA;    等待响应头 --&gt; 读取超时异常: 超过readTimeout时间未收到有效数据&#xA;    读取超时异常 --&gt; [*]: 抛出SocketTimeoutException(read timed out)&#xA;&#xA;&#xA;    等待响应头 --&gt; 收到首数据包: 收到响应头&#xA;    收到首数据包 --&gt; 等待数据分片: 开始接收数据流&#xA;    等待数据分片 --&gt; 处理数据分片: 持续接收数据块&#xA;    处理数据分片 --&gt; 数据接收完成: 收到完整响应体&#xA;    数据接收完成 --&gt; 业务处理: 执行后续逻辑&lt;/template&gt;&lt;ul&gt;&#xA;&lt;li&gt;具体含义：&#xA;客户端已经与服务器建立了连接（即 TCP 三次握手成功），但在请求数据后，客户端等待服务器返回响应时超出了预定的时间限制。&#xA;这表明虽然连接是成功的，但服务器在规定时间内没有响应，可能是由于服务器处理请求的时间过长，或者服务器处于过载状态。&lt;/li&gt;&#xA;&lt;li&gt;常见原因：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;服务器处理缓慢：服务器可能在执行某个复杂的操作或查询时耗费了过长的时间，导致超时。&lt;/li&gt;&#xA;&lt;li&gt;网络延迟：网络问题或带宽不足导致数据传输变慢，造成超时。&lt;/li&gt;&#xA;&lt;li&gt;服务器过载：服务器承载的负载过高，导致处理请求的响应速度减慢，超出客户端的超时时间。&lt;/li&gt;&#xA;&lt;li&gt;API 限制：某些 API 或 Web 服务可能在请求中有限制，导致需要等待更长时间才能返回数据。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;解决方案：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;优化服务器性能：检查服务器的负载，优化资源消耗，确保服务器可以及时响应请求。&lt;/li&gt;&#xA;&lt;li&gt;增加超时时间：如果是客户端超时设置过短，可以尝试增加超时时间，以允许更多时间来等待服务器响应。&lt;/li&gt;&#xA;&lt;li&gt;使用负载均衡：如果服务器负载过高，可以通过负载均衡将请求分发到多个服务器以减少负载。&lt;/li&gt;&#xA;&lt;li&gt;优化网络：检查网络质量，确保带宽充足，减少网络延迟。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;write-timed-out&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;Write Timed Out&lt;/span&gt;&#xA;  &lt;a href=&#34;#write-timed-out&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;定义：Write timed out 错误发生在客户端向服务器发送数据时，如果在规定的时间内未能成功发送数据或数据写入过程中超时，就会触发写入超时。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre class=&#34;mermaid&#34;&gt;stateDiagram-v2&#xA;    [*] --&gt; 数据待发送&#xA;    数据待发送 --&gt; 发送数据并启动定时器: 调用write()写入数据&#xA;    发送数据并启动定时器 --&gt; 等待ACK确认: 数据进入SendQ队列&#xA;    &#xA;    state 超时判断 &lt;&lt;choice&gt;&gt;&#xA;    等待ACK确认 --&gt; 超时判断&#xA;    超时判断 --&gt; 触发写超时异常: 超过writeTimeout时间且未收到ACK&#xA;    触发写超时异常 --&gt; [*]: 抛出SocketTimeoutException(write timed out)&#xA;    &#xA;    state 正常流程 {&#xA;        等待ACK确认 --&gt; 收到ACK确认: 收到TCP ACK&#xA;        收到ACK确认 --&gt; 继续后续操作: 数据完成传输&#xA;    }&#xA;    &#xA;    state 重传机制 {&#xA;        [*] --&gt; 首次发送失败&#xA;        首次发送失败 --&gt; 重传数据包: 启动RTO定时器&#xA;        重传数据包 --&gt; 等待ACK确认&#xA;        重传数据包 --&gt; 最大重试次数: 达到tcp_retries2限制&#xA;        最大重试次数 --&gt; 关闭连接: 终止TCP会话&#xA;    }&lt;/pre&gt;&#xA;&lt;template&gt;stateDiagram-v2&#xA;    [*] --&gt; 数据待发送&#xA;    数据待发送 --&gt; 发送数据并启动定时器: 调用write()写入数据&#xA;    发送数据并启动定时器 --&gt; 等待ACK确认: 数据进入SendQ队列&#xA;    &#xA;    state 超时判断 &lt;&lt;choice&gt;&gt;&#xA;    等待ACK确认 --&gt; 超时判断&#xA;    超时判断 --&gt; 触发写超时异常: 超过writeTimeout时间且未收到ACK&#xA;    触发写超时异常 --&gt; [*]: 抛出SocketTimeoutException(write timed out)&#xA;    &#xA;    state 正常流程 {&#xA;        等待ACK确认 --&gt; 收到ACK确认: 收到TCP ACK&#xA;        收到ACK确认 --&gt; 继续后续操作: 数据完成传输&#xA;    }&#xA;    &#xA;    state 重传机制 {&#xA;        [*] --&gt; 首次发送失败&#xA;        首次发送失败 --&gt; 重传数据包: 启动RTO定时器&#xA;        重传数据包 --&gt; 等待ACK确认&#xA;        重传数据包 --&gt; 最大重试次数: 达到tcp_retries2限制&#xA;        最大重试次数 --&gt; 关闭连接: 终止TCP会话&#xA;    }&lt;/template&gt;&lt;ul&gt;&#xA;&lt;li&gt;具体含义：&#xA;客户端正在向服务器写入数据，但由于某些原因，数据写入操作无法在规定的时间内完成。&#xA;这可能是由于网络拥塞、服务器负载过高，或者服务器的 I/O 处理速度较慢。&lt;/li&gt;&#xA;&lt;li&gt;常见原因：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;网络拥塞：网络带宽不足或网络链路延迟过高，导致数据传输速度过慢，无法在规定时间内完成写入。&lt;/li&gt;&#xA;&lt;li&gt;服务器负载过高：服务器的磁盘 I/O 或 CPU 资源可能处于高负载状态，导致写操作缓慢。&lt;/li&gt;&#xA;&lt;li&gt;大文件上传：客户端尝试上传的文件较大，导致数据写入操作超时。&lt;/li&gt;&#xA;&lt;li&gt;TCP 拥塞控制：TCP 协议本身有一定的流量控制和拥塞控制机制，可能会导致写操作被延迟，最终超时。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;解决方案：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;检查网络质量：使用工具（如 ping、iperf）检查网络延迟和带宽，确保网络链路畅通。&lt;/li&gt;&#xA;&lt;li&gt;优化服务器资源：如果是服务器负载过高，考虑优化服务器配置、增加硬件资源，或者优化数据处理逻辑。&lt;/li&gt;&#xA;&lt;li&gt;分块传输：对于大文件上传，考虑使用分块上传等技术，避免一次性传输大数据造成超时。&lt;/li&gt;&#xA;&lt;li&gt;增加客户端超时时间：如果客户端超时时间设置过短，可以增加超时时间，给予服务器更多的时间来完成写操作。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;总结&#34; class=&#34;heading-element&#34;&gt;&lt;span&gt;总结&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e6%80%bb%e7%bb%93&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;Connect Timed Out：连接超时，客户端无法在规定时间内建立与服务器的连接，通常是由于网络问题、目标服务器不可达或防火墙设置导致。&lt;/li&gt;&#xA;&lt;li&gt;Read Timed Out：读取超时，客户端与服务器连接成功，但在规定时间内未收到服务器响应，可能是服务器处理过慢、网络延迟或服务器负载过高等原因导致。&lt;/li&gt;&#xA;&lt;li&gt;Write Timed Out：写入超时，客户端尝试向服务器发送数据时，未能在规定时间内完成数据发送，通常是由于网络拥塞、服务器负载过高或大文件传输造成的。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;对比三种timeout：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;/th&gt;&#xA;          &lt;th&gt;ConnectTimeout&lt;/th&gt;&#xA;          &lt;th&gt;ReadTimeout&lt;/th&gt;&#xA;          &lt;th&gt;WriteTimeout&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;​&lt;strong&gt;定义&lt;/strong&gt;​&lt;/td&gt;&#xA;          &lt;td&gt;建立TCP连接的最大等待时间（含DNS解析、三次握手）&lt;/td&gt;&#xA;          &lt;td&gt;建立连接后等待服务器响应数据的最大时间&lt;/td&gt;&#xA;          &lt;td&gt;向服务器发送数据的最大等待时间&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;​&lt;strong&gt;触发阶段&lt;/strong&gt;​&lt;/td&gt;&#xA;          &lt;td&gt;TCP三次握手阶段（SYN-SYN_ACK交换）&lt;/td&gt;&#xA;          &lt;td&gt;数据传输阶段（ESTABLISHED状态）&lt;/td&gt;&#xA;          &lt;td&gt;数据发送阶段（SendQ队列传输）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;​&lt;strong&gt;典型异常&lt;/strong&gt;​&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;SocketTimeoutException: connect timed out&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;SocketTimeoutException: read timed out&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;SocketTimeoutException: write timed out&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;​&lt;strong&gt;典型场景&lt;/strong&gt;​&lt;/td&gt;&#xA;          &lt;td&gt;服务器未启动、防火墙拦截、网络路由故障&lt;/td&gt;&#xA;          &lt;td&gt;服务器处理延迟、大文件下载断流、网络波动&lt;/td&gt;&#xA;          &lt;td&gt;大文件上传卡顿、发送缓冲区满、网络中断&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;​&lt;strong&gt;配置方法&lt;/strong&gt;​&lt;/td&gt;&#xA;          &lt;td&gt;Java：&lt;code&gt;setConnectTimeout()&lt;/code&gt; HTTP库：&lt;code&gt;connectTimeout&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Java：&lt;code&gt;setReadTimeout()&lt;/code&gt; HTTP库：&lt;code&gt;readTimeout&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Netty：&lt;code&gt;WriteTimeoutHandler&lt;/code&gt; Go：&lt;code&gt;SetWriteDeadline&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;​&lt;strong&gt;默认值&lt;/strong&gt;​&lt;/td&gt;&#xA;          &lt;td&gt;无限等待（部分框架默认2-5秒）&lt;/td&gt;&#xA;          &lt;td&gt;无限等待（部分框架默认30-60秒）&lt;/td&gt;&#xA;          &lt;td&gt;无限等待（部分框架默认30秒）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;​&lt;strong&gt;协议层关联&lt;/strong&gt;​&lt;/td&gt;&#xA;          &lt;td&gt;应用层设置覆盖TCP内核参数&lt;code&gt;tcp_syn_retries&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;应用层设置覆盖TCP内核参数&lt;code&gt;tcp_retries2&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;应用层与TCP重传机制协同（RTO动态计算）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;在遇到这些超时错误时，通常需要根据具体情况排查网络连接、服务器负载、配置参数等因素，以找到根本原因并解决问题。&lt;/p&gt;&#xA;</description>
    </item>
  </channel>
</rss>
